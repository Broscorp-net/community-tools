github.token=${GITHUB_TOKEN}
github.repository=Broscorp-net/traineeship

slack.webhook="${SLACK_WEBHOOK}"
slack.token=${SLACK_TOKEN}

# database
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.datasource.platform=postgres
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER_NAME}
spring.datasource.password=${DB_PASSWORD}


idOfSlackBot=UQWD538CT
#messages for bot
welcome=Welcome to the club buddy :dealwithit:
checkNickName=ok i'll check your nick 
congratsAvailableNick=congrats your nick available 
getFirstTask=[{"type": "section","text": {"type": "mrkdwn","text": "Here is your first task <https://github.com/Broscorp-net/traineeship/tree/master/module1/src/main/java/net/broscorp/a_patform|TASK>. gl :face_with_cowboy_hat:"}}]
failedCheckNickName=Sry but looks like you are still not added to our team in Git :worried:
doNotUnderstandWhatTodo=I do not understand what you want, please call the admin!

agreeMessage=ПРАВИЛА ВЫПОЛНЕНИЯ ЗАДАНИЯ\n Первое, что тебе нужно сделать - Fork репозиторий. Если ты форкнул репозиторий не только что, а уже давно работаешь над заданиями – тебе нужно обновиться. Инструкция как это сделать:\n https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/merging-an-upstream-repository-into-your-fork\n Если ты дисциплинированно создавал ветки и не добавлял коммиты в master то все должно пройти без конфликтов =)\n Каждое новое задание необходимо выполнять по следующему алгоритму:\n \n Каждое задание – отдельная ветка. Сделай ветку для задания и выполняй его в соответствии с инструкциями. Имя ветки должно совпадать с именем пакета задания.\n Сделай pull request из этой ветки в наш репозиторий. Имя pull request должно совпадать с именем пакета задания.\n Мы проверим задание, подскажем что нужно исправить и примем задание. Если что-то надо поменять мы добавим метку changes requested. Если это произошло:\n 2.1. Исправь, пожалуйста, замечания.\n 2.2. Удали метку changes requested и добавь метку ready for review.\n 2.3. Метка done – задание принято.\n 2.4. Если ты не можешь менять метки – значит мы провтыкали и не добавили тебя в команду (или добавили, но приглашение не было принято, так что проверь почту) – напиши об этом Anton Chernetskiy в слеке.\n Сообщение для диалога со стажером:\n Yay, you've read all the requirements! Congratulations! Below is a link to your first task. Good luck :)
firstAgreeMessage="Мы собрались здесь, чтобы стать крутыми комерческими разработчиками\uD83D\uDE0A\n Для начала разберемся с определениями:\n Кто такой комерческий разработчик? – Это человек, который приносит бизнесу деньги.\n Как он может это делать? – Разрабатывать софт, который зарабатывает или экономит деньги. Для этого он должен, затратив минимальное количество ресурсов, разработать софт, имеющий внутреннее и внешнее качество.\n Внешнее качество – на сколько хорошо софт решает бизнес задачу.\n Внутреннее качество – на сколько легко созданный софт развивать, поддерживать, а также как легко его понимать другим членам команды.\n Какими навыками обладает крутой разработчик? – Кроме технических навыков, крутой разработчик обладает «soft skills». В первую очередь это умение помогать членам команды. Работая в команде, мы можем приумножить результаты своих усилий, научив людей тому, что умеем, и учась у них." Важной частью этого навыка есть умение критиковать конструктивно. Мы не говорим, что сделано плохо, а говорим, что можно сделать лучше и почему!\n Итого, наши принципы:\n \n Цель работы разработчика – за минимальное время сделать максимально качественное ПО, мы хотим совершенствовать этот навык.\n Взаимопомощь – мы работаем в команде и помогаем друг другу.\n Конструктивная критика – мы говорим, что можно сделать лучше, а не что сделано плохо.\n Сообщение для диалога со стажером:\n If you agree with us, write \"I agree\". Follow this action until you receive the following instructions:)
secondAgreeMessage="ОСНОВНЫЕ ПРАВИЛА\n Код форматируется в соответствии с Google code style.\n Настройки для среды разработки (https://github.com/google/styleguide) :\n IntelliJ IDEA https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml\n Eclipse https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml\n Все проекты собираются с помощью Maven.\n Файлы среды разработки и прочие временные файлы не должны попадать в репозиторий (https://github.com/github/gitignore).\n Покрытие кода Unit tests (Junit5):\n Тест проверяет один кусок логики за раз. То есть, если необходимо проверить как работает метод, который мы проверяем с правильными данными – это один тест. Если необходимо проверить как работает метод с другими данными - второй тест.\n Тест пишется по принципу:\n Подготовка тестовых данных.\n Исполнение метода, который мы тестируем.\n Проверка результата."
usersAgreeMessage=I agree

addGitName=[{"type": "divider"},{"type": "section","text": {"type": "plain_text","text": "Now you should join to our team, at git hub, and after tell me your name.:alien::alien::alien::alien::alien:","emoji": true}}]
noOneCase=[{"type": "divider"},{"type": "section","text": {"type": "mrkdwn","text": "NO ONE CASE "},"accessory": {"type": "button","text": {"type": "plain_text","text": "Button","emoji": true},"value": "Button"}}]
notThatMessage=[{"type": "section","text": {"type": "mrkdwn","text": "Please answer the latest message :ghost:"}}]
lastTask =Cheers!:tada: You are one step away from finish your tasks. Make it and wait for reviews. Also you can help your colleagues on their ways :hugging_face:

#git check new request
git.check.label=labeled
git.check.new.req=opened
git.number.of.tasks=14
>>>>>>> 527ef0e478c75f6cc15810614672e703a6bb7309
