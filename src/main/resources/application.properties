github.token=${GITHUB_TOKEN}
github.repository=Broscorp-net/traineeship
github.secret.token=${GITHUB_SECRET_TOKEN}

slack.webhook="${SLACK_WEBHOOK}"
slack.token=${SLACK_TOKEN}

discord.token=${DISCORD_TOKEN}

currentMessageService=slackService

# database
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.datasource.platform=postgres
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER_NAME}
spring.datasource.password=${DB_PASSWORD}

# ProdBot
idOfSlackBot=U01ABLCB62G

#messages for bot
answeredNoDuringVerification=Oops, sorry :neutral_face: Check your nickname correctly and try again, please :hugging_face:
askAboutProfile=Is it your profile? (*yes*/*no*)
checkNickName=Okay! Let me check your nick, 
errorWithAddingGitName=[{"type": "section","text": {"type": "mrkdwn","text": "Something went wrong with adding to the team. Please, contact *<https://broscorp-community.slack.com/archives/D01QZ9U2GH5|Liliya Stepanovna>*"}}]
doNotUnderstandWhatTodo=I do not understand what you want, please call the admin!
failedCheckNickName=Sry but looks like you are still not added to our team in Git :worried:
failedNickName=Sry but looks like you are not registered on Github :worried:
getFirstTask=[{"type": "section","text": {"type": "mrkdwn","text": "Hurray! Your nick is available. Nice to meet you :smile:\n\nThis is your first <https://github.com/Broscorp-net/traineeship/tree/master/module1/src/main/java/net/broscorp/checkstyle|TASK>. gl"}}]
lastTask =You are so cool! :tada: Just one step away from finishing your set of tasks. Make your last task, send it and wait for the review. Also you can help your colleagues on their journey :hugging_face:
usersAgreeMessage=I agree
welcome=Welcome to the club buddy :dealwithit:
addGitName=[{"type": "section","text": {"type": "mrkdwn","text":"So, that's it. You've read through all our rules. \n If you're ready to accept this challenge enter your GitHub nickname."}}]
noOneCase=[{"type": "divider"},{"type": "section","text": {"type": "mrkdwn","text": "NO ONE CASE "},"accessory": {"type": "button","text": {"type": "plain_text","text": "Button","emoji": true},"value": "Button"}}]
notThatMessage = [{"type": "section","text": {"type": "mrkdwn","text": "Please answer the latest message :ghost:"}}]
abilityReviewMessage =  [{"type": "context", "elements": [{"type": "mrkdwn","text": " Well done! Now you can review tasks your colleagues :sunglasses: \n You can leave comments on those tasks where you have the marking label done (the task is accepted).\n\n If you think that it is necessary to make changes, write a comment and install the label *changes request*. When you and your colleague decide that the changes applied and the task is done, you should write a comment *approved*. \n\n If in your opinion everything is ok to write a comment approved. You can specify what was done well. :relaxed:  \n For the quality reviews, you can get + into karma :smirk:"}]}]
zeroPointsMessage = For the task "pull_name" you got 0 points. You made a mistake in the name of the pull request, from now on be more careful.
defaultMessage = Oops, I'm sorry, but I don't have an answer to your request.
firstQuestion = [ {"type": "context", "elements": [{ "type": "mrkdwn", "text": "```1. What names should branches and pull requests have?```" } ] } ]
secondQuestion =  [ {"type": "context", "elements": [{ "type": "mrkdwn", "text": "```2. Which library should be used for unit testing?```" } ] } ]
thirdQuestion =  [ {"type": "context", "elements": [{ "type": "mrkdwn", "text": "```3. Your task labelled as \\"changes requested\\". What is your next step?```" } ] } ]
messageAboutRules = [{ "type": "section", "text": { "type": "mrkdwn", "text": "Before you start, be sure to familiarize yourself with the rules.  You can read the rules by clicking on this link.:point_down:" }}, { "type": "section", "text": { "type": "mrkdwn", "text": "<https://github.com/Broscorp-net/traineeship/blob/master/README.md|Rules>" } }, { "type": "section", "text": { "type": "mrkdwn", "text": "After you have read the rules, please answer a few questions."} }, {"type": "context","elements": [{"type": "mrkdwn","text": "`Let me know when you are ready (write \\"ready\\").`"}]}]


#Information channels message
messageAboutSeveralInfoChannel = [{"type": "header","text": {"type": "plain_text","text": "We have several channels to help you during your internship:"}},{"type": "context","elements": [{"type": "mrkdwn","text": "1. #welcome \n Please write a few words about yourself) \n Yeees, perhaps you will work with these people in one team :slightly_smiling_face: "}]},{"type": "context","elements": [{"type": "mrkdwn","text": "2. #help \n You can ask questions on any subject and get an answer :nerd_face: "}]},{"type": "context","elements": [{"type": "mrkdwn","text": " 3. #general \n Channel for important messages and various announcements:rolled_up_newspaper::bookmark_tabs:"}]},{"type": "context","elements": [{"type": "mrkdwn","text": " 4. #random \n A channel for communication on any topics :yum:"}]},{"type": "context","elements": [{"type": "mrkdwn","text": "5. #hall-of-fame \n Stories of those who have completed an internship and found a job :sunglasses:"}]},{"type": "context","elements": [{"type": "mrkdwn","text": "`Please use the trades to respond to messages.`"}]}]
tasksForUsers= checkstyle, primitives, boxing, valueref, equals/hashcode, patform, bytecode, gc, exceptions, classpath, generics, inner/classes, override/overload, strings, gamelife

pointsForTask = {'checkstyle':1, 'primitives':2, 'boxing':2, 'valueref':3, 'equals/hashcode':3, 'patform':3,\
  'bytecode':2, 'gc':4, 'exceptions':4, 'classpath':3, 'generics':5, 'inner/classes':5, 'override/overload':4, 'strings':5, 'gamelife':10}

noActivityMessage = There was no activity last week :pensive:

#git check new request
git.check.label=labeled
git.check.new.req=opened
git.number.of.tasks=15

importantInformationChannel = general
generalInformationChannel  = test_3
urlServer = ${URL_SERVER}

testModeSwitcher = false